logging.yaml — Flexible logging configuration for AI‑memory‑

-----------------------------------------------------------

This file is consumed by logging.config.dictConfig at service startup.

* Two formatters: human‑friendly console and JSON json for Promtail/ELK.

* The JSON handler ships structured logs that Promtail (Loki) easily parses.

* Root level defaults to INFO but may be overridden via LOG_LEVEL.

* Per‑module levels are applied programmatically from Settings.log_level_per_module.

version: 1

formatters: console: format: "%(levelname)s | %(name)s | %(message)s" json: (): pythonjsonlogger.jsonlogger.JsonFormatter fmt: "%(asctime)s %(levelname)s %(name)s %(message)s %(pathname)s %(lineno)d"

handlers: default: class: logging.StreamHandler formatter: console stream: ext://sys.stdout promtail: class: logging.StreamHandler formatter: json stream: ext://sys.stdout level: INFO

loggers: uvicorn.error: level: INFO handlers: [default] propagate: no

uvicorn.access: level: WARNING handlers: [default] propagate: no

root: level: INFO  # overridden at runtime by Settings.log_level handlers: [default, promtail]

NOTE: Per‑module log‑levels are applied in app.startup using

for name, lvl in settings.log_level_per_module.items(): logging.getLogger(name).setLevel(lvl).
