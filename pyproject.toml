[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name        = "unified-memory-system"
version     = "0.8-alpha"
description = "Enterprise-grade memory system with vector search, FastAPI and monitoring"
readme      = "README.md"
license     = { text = "Apache License 2.0" }
authors = [
    {name = "Leshchenko Evgeny, ChatGPT, Claude", email = "rage19671999@gmail.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Framework :: FastAPI",
    "Typing :: Typed",
]
keywords = [
    "memory", "vector-search", "embeddings", "faiss", "fastapi", 
    "machine-learning", "nlp", "semantic-search", "enterprise", 
    "production", "monitoring", "api"
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "faiss-cpu>=1.7.4,<2.0.0",
    "sentence-transformers>=2.2.2,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "torch>=2.1.0,<3.0.0",
    "aiosqlite>=0.19.0,<1.0.0",
    "cryptography>=41.0.0,<42.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "prometheus-client>=0.19.0,<1.0.0",
    "psutil>=5.9.0,<6.0.0",
    "httpx>=0.26.0,<0.27.0",
    "requests>=2.31.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "rich>=13.6.0,<14.0.0",
    "typer>=0.9.0,<1.0.0",
    "click>=8.1.0,<9.0.0",
    "python-dateutil>=2.8.2,<3.0.0",
    "anyio>=3.7.1,<4.0.0",
    "orjson>=3.9.0,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-benchmark>=4.0.0,<5.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "black>=23.9.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.6.0,<2.0.0",
    "pylint>=3.0.0,<4.0.0",
    "bandit>=1.7.5,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
]
gpu = ["faiss-gpu>=1.7.4,<2.0.0"]
full = [
    "unified-memory-system[dev,gpu]"
]

[project.scripts]
unified-memory = "memory_system.cli:main"
umem = "memory_system.cli:main"

[project.urls]
Homepage = "https://github.com/your-org/unified-memory-system"
Documentation = "https://unified-memory-system.readthedocs.io/"
Repository = "https://github.com/your-org/unified-memory-system"

# Tool configurations
[tool.setuptools.packages.find]
where = ["."]
include = ["memory_system*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"memory_system" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["memory_system"]
known_third_party = ["fastapi", "pydantic", "numpy", "torch", "faiss"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=memory_system",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "gpu: marks tests that require GPU",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["memory_system"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "line-too-long",  # Handled by black
    "missing-docstring",
]

[tool.pylint.format]
max-line-length = 100
